# !pip install llama_index
# !pip install pip install llama-index-embeddings-huggingface

def ai_matcher(first_list, second_list):
    # # Adapted from: https://blog.gopenai.com/fuzzy-string-matching-with-llama-index-662a6c803944

    from llama_index.core.schema import TextNode
    from llama_index.core import VectorStoreIndex, Settings
    from llama_index.core.embeddings import resolve_embed_model

    Settings.embed_model = resolve_embed_model("local:BAAI/bge-small-en-v1.5")

    nodes = [TextNode(text=x) for x in second_list]

    index = VectorStoreIndex(nodes)

    retriever = index.as_retriever(similarity_top_k=1, choice_batch_size=1)

    return [{"Name": x, "Matched": retriever.retrieve(f"find {x}")[0].node.text} for x in first_list]

__________________________________

from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def fuzzy_merge(df_1, df_2, key1, key2, threshold=90, limit=1):
    s = df_2[key2].tolist()
    m = df_1[key1].apply(lambda x: process.extract(x, s, limit=limit))
    df_1['matches'] = m
    m2 = df_1['matches'].apply(lambda x: ', '.join([i[0] for i in x if i[1] >= threshold]))
    df_1['matches'] = m2

    return df_1
    
    
    --------------------------
    
    
from fuzzywuzzy import process

def fuzzy_list(first_list, second_list, threshold=80, limit=5):
    dicto = {}

    for word in first_list:

        result = process.extract(word, second_list, limit=limit)
        result = [x for x in result if x[1] >= threshold]    

        if len(result) > 0:
            result = result[0]
            dicto[word] = result[0]
    not_in = [x for x in first_list if x not in dicto.keys()]
    print(f"Was not able to match: {not_in}")
    return dicto 
